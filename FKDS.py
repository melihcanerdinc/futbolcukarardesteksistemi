########################################################
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from anasayfa_arayuzu import Ui_AnaSayfa
from topsis_sonuc_arayuzu import Ui_Topsis_sonuc_penceresi
from vikor_sonuc_arayuzu import Ui_Vikor_Sonuc_Penceresi
from copras_sonuc_arayuzu import Ui_Copras_sonuc_penceresi
from moora_sonuc_arayuzu import Ui_Moora_sonuc_penceresi
from py_decisions.ahp.ahp import ahp_method
from py_decisions.topsis.topsis import topsis_method
from py_decisions.vikor.vikor import vikor_method
from py_decisions.copras.copras import copras_method
from py_decisions.moora.moora import moora_method
import numpy as np
import sys
########################################################

class AnaPencere(QMainWindow,QTableWidget,QTableWidgetItem):

    def __init__(self):
        super().__init__()

        self.ui = Ui_AnaSayfa()
        self.ui.setupUi(self)

        self.futbolcular = [[],[]]
        self.standartagirliklar = []

        self.ui.pushButton_hesapla_ahp.clicked.connect(self.hesapla_ahp)
        self.ui.pushButton_varsayilan_ahp.clicked.connect(self.standartize_ahp)

        self.ui.pushButton_futbolcuekle_topsis.clicked.connect(self.futbolcu_ekle)
        self.ui.pushButton_futbolcuekle_vikor.clicked.connect(self.futbolcu_ekle)
        self.ui.pushButton_futbolcuekle_copras.clicked.connect(self.futbolcu_ekle)
        self.ui.pushButton_futbolcuekle_moora.clicked.connect(self.futbolcu_ekle)

        self.ui.pushButton_futbolcucikar_topsis.clicked.connect(self.futbolcu_cikar)
        self.ui.pushButton_futbolcucikar_vikor.clicked.connect(self.futbolcu_cikar)
        self.ui.pushButton_futbolcucikar_copras.clicked.connect(self.futbolcu_cikar)
        self.ui.pushButton_futbolcucikar_moora.clicked.connect(self.futbolcu_cikar)

        self.ui.pushButton_kopyala_topsis.clicked.connect(self.verileri_kopyala)
        self.ui.pushButton_kopyala_vikor.clicked.connect(self.verileri_kopyala)
        self.ui.pushButton_kopyala_copras.clicked.connect(self.verileri_kopyala)
        self.ui.pushButton_kopyala_moora.clicked.connect(self.verileri_kopyala)

        self.ui.radioButton_managirlik_topsis.clicked.connect(self.el_ile_agirlik_topsis)
        self.ui.radioButton_stdagirlik_topsis.clicked.connect(self.stndrt_agirlik_topsis)

        self.ui.radioButton_managirlik_vikor.clicked.connect(self.el_ile_agirlik_vikor)
        self.ui.radioButton_stdagirlik_vikor.clicked.connect(self.stndrt_agirlik_vikor)

        self.ui.radioButton_managirlik_copras.clicked.connect(self.el_ile_agirlik_copras)
        self.ui.radioButton_stdagirlik_copras.clicked.connect(self.stndrt_agirlik_copras)

        self.ui.radioButton_managirlik_moora.clicked.connect(self.el_ile_agirlik_moora)
        self.ui.radioButton_stdagirlik_moora.clicked.connect(self.stndrt_agirlik_moora)

        self.ui.pushButton_hesapla_topsis.clicked.connect(self.hesapla_topsis)
        self.ui.pushButton_hesapla_vikor.clicked.connect(self.hesapla_vikor)
        self.ui.pushButton_hesapla_copras.clicked.connect(self.hesapla_copras)
        self.ui.pushButton_hesapla_moora.clicked.connect(self.hesapla_moora)

        self.ui.pushButton_karsilastir.clicked.connect(self.karsilastir_borda)
        self.ui.pushButton_borda_puan.clicked.connect(self.hesapla_borda)

        self.topsis_sonuc = SonucPencere_Topsis()
        self.vikor_sonuc = SonucPencere_Vikor()
        self.copras_sonuc = SonucPencere_Copras()
        self.moora_sonuc = SonucPencere_Moora()

        self.ui.statusBar.showMessage(" Generated By Melihcan Erdin√ß...", 60000)

    def hesapla_ahp(self):

        ahp_verisi = self.ui.lineEdit_2.text()
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_8.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_3.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_15.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_4.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_22.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_5.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_29.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_6.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_36.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_7.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_43.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_10.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_16.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_11.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_23.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_12.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_30.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_13.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_37.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_14.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_44.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_18.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_24.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_19.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_31.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_20.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_38.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_21.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_45.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_26.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_32.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_27.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_39.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_28.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_46.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_34.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_40.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_35.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_47.setText(str(ahp_verisi))

        ahp_verisi = (self.ui.lineEdit_42.text())
        if ahp_verisi.isdigit():
            ahp_verisi = int(ahp_verisi)
        else:
            ahp_verisi = float(ahp_verisi)
        ahp_verisi = 1 / (ahp_verisi)
        self.ui.lineEdit_48.setText(str(ahp_verisi))

        weight_derivation = 'geometric'

        ahp_sayi_listesi = []

        ahp_sayisi = self.ui.lineEdit.text()
        ahp_sayisi = int(ahp_sayisi)
        ahp_sayi_listesi.append(ahp_sayisi)

        for i in range(2,50):
            ahp_verisi = getattr(self.ui, "lineEdit_{}".format(i)).text()

            if ahp_verisi.isdigit():
                ahp_sayisi = int(ahp_verisi)
            else:
                ahp_sayisi = float(ahp_verisi)

            ahp_sayi_listesi.append(ahp_sayisi)

        ahp_veri_listesi = [[],[],[],[],[],[],[]]


        for i in range(7):
            ahp_veri_listesi[0].append(ahp_sayi_listesi[i])

        for i in range(7,14):
            ahp_veri_listesi[1].append(ahp_sayi_listesi[i])

        for i in range(14,21):
            ahp_veri_listesi[2].append(ahp_sayi_listesi[i])

        for i in range(21,28):
            ahp_veri_listesi[3].append(ahp_sayi_listesi[i])

        for i in range(28,35):
            ahp_veri_listesi[4].append(ahp_sayi_listesi[i])

        for i in range(35,42):
            ahp_veri_listesi[5].append(ahp_sayi_listesi[i])

        for i in range(42,49):
            ahp_veri_listesi[6].append(ahp_sayi_listesi[i])

        print(ahp_sayi_listesi)
        print(ahp_veri_listesi)

        dataset = np.array(ahp_veri_listesi)

        agirliklar, tutarlilik_orani = ahp_method(dataset, wd = weight_derivation)

        print("")
        print(agirliklar)

        self.ui.lineEdit_50.setText(str(round(agirliklar[0], 3)))
        self.ui.lineEdit_51.setText(str(round(agirliklar[1], 3)))
        self.ui.lineEdit_52.setText(str(round(agirliklar[2], 3)))
        self.ui.lineEdit_53.setText(str(round(agirliklar[3], 3)))
        self.ui.lineEdit_54.setText(str(round(agirliklar[4], 3)))
        self.ui.lineEdit_55.setText(str(round(agirliklar[5], 3)))
        self.ui.lineEdit_56.setText(str(round(agirliklar[6], 3)))

        if (tutarlilik_orani > 0.10):
            self.ui.statusBar.showMessage(" √á√∂z√ºm tutarsƒ±z, ikili kar≈üƒ±la≈ütƒ±rmalar g√∂zden ge√ßirilmeli.",15000)
        else:
            self.ui.statusBar.showMessage(" √á√∂z√ºm tutarlƒ±.",15000)

        print("")
        print(tutarlilik_orani)

        self.standartagirliklar = agirliklar

    def standartize_ahp(self):

        if (len(self.standartagirliklar)) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±", "√ñnce aƒüƒ±rlƒ±klarƒ± hesaplamanƒ±z gerekmektedir.")

        else:
            self.ui.lineEdit_yas_topsis.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_topsis.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_topsis.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_topsis.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_topsis.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_topsis.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_topsis.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.lineEdit_yas_vikor.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_vikor.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_vikor.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_vikor.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_vikor.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_vikor.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_vikor.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.lineEdit_yas_copras.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_copras.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_copras.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_copras.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_copras.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_copras.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_copras.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.lineEdit_yas_moora.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_moora.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_moora.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_moora.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_moora.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_moora.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_moora.setText(str(round(self.standartagirliklar[6], 3)))

            QMessageBox.information(self, "Bilgi Mesajƒ±", "Hesaplanan aƒüƒ±rlƒ±klar standart aƒüƒ±rlƒ±klar olarak belirlendi.")

    def el_ile_agirlik_topsis(self):

        self.ui.lineEdit_yas_topsis.setEnabled(True)
        self.ui.comboBox_yas_topsis.setEnabled(True)

        self.ui.lineEdit_yetenek_topsis.setEnabled(True)
        self.ui.comboBox_yetenek_topsis.setEnabled(True)

        self.ui.lineEdit_caliskanlik_topsis.setEnabled(True)
        self.ui.comboBox_caliskanlik_topsis.setEnabled(True)

        self.ui.lineEdit_teknik_topsis.setEnabled(True)
        self.ui.comboBox_teknik_topsis.setEnabled(True)

        self.ui.lineEdit_fiziksel_topsis.setEnabled(True)
        self.ui.comboBox_fiziksel_topsis.setEnabled(True)

        self.ui.lineEdit_uyum_topsis.setEnabled(True)
        self.ui.comboBox_uyum_topsis.setEnabled(True)

        self.ui.lineEdit_liderlik_topsis.setEnabled(True)
        self.ui.comboBox_liderlik_topsis.setEnabled(True)

    def el_ile_agirlik_vikor(self):

        self.ui.lineEdit_stragirlik_vikor.setEnabled(True)

        self.ui.lineEdit_yas_vikor.setEnabled(True)
        self.ui.comboBox_yas_vikor.setEnabled(True)

        self.ui.lineEdit_yetenek_vikor.setEnabled(True)
        self.ui.comboBox_yetenek_vikor.setEnabled(True)

        self.ui.lineEdit_caliskanlik_vikor.setEnabled(True)
        self.ui.comboBox_caliskanlik_vikor.setEnabled(True)

        self.ui.lineEdit_teknik_vikor.setEnabled(True)
        self.ui.comboBox_teknik_vikor.setEnabled(True)

        self.ui.lineEdit_fiziksel_vikor.setEnabled(True)
        self.ui.comboBox_fiziksel_vikor.setEnabled(True)

        self.ui.lineEdit_uyum_vikor.setEnabled(True)
        self.ui.comboBox_uyum_vikor.setEnabled(True)

        self.ui.lineEdit_liderlik_vikor.setEnabled(True)
        self.ui.comboBox_liderlik_vikor.setEnabled(True)

    def el_ile_agirlik_copras(self):

        self.ui.lineEdit_yas_copras.setEnabled(True)
        self.ui.comboBox_yas_copras.setEnabled(True)

        self.ui.lineEdit_yetenek_copras.setEnabled(True)
        self.ui.comboBox_yetenek_copras.setEnabled(True)

        self.ui.lineEdit_caliskanlik_copras.setEnabled(True)
        self.ui.comboBox_caliskanlik_copras.setEnabled(True)

        self.ui.lineEdit_teknik_copras.setEnabled(True)
        self.ui.comboBox_teknik_copras.setEnabled(True)

        self.ui.lineEdit_fiziksel_copras.setEnabled(True)
        self.ui.comboBox_fiziksel_copras.setEnabled(True)

        self.ui.lineEdit_uyum_copras.setEnabled(True)
        self.ui.comboBox_uyum_copras.setEnabled(True)

        self.ui.lineEdit_liderlik_copras.setEnabled(True)
        self.ui.comboBox_liderlik_copras.setEnabled(True)

    def el_ile_agirlik_moora(self):

        self.ui.lineEdit_yas_moora.setEnabled(True)
        self.ui.comboBox_yas_moora.setEnabled(True)

        self.ui.lineEdit_yetenek_moora.setEnabled(True)
        self.ui.comboBox_yetenek_moora.setEnabled(True)

        self.ui.lineEdit_caliskanlik_moora.setEnabled(True)
        self.ui.comboBox_caliskanlik_moora.setEnabled(True)

        self.ui.lineEdit_teknik_moora.setEnabled(True)
        self.ui.comboBox_teknik_moora.setEnabled(True)

        self.ui.lineEdit_fiziksel_moora.setEnabled(True)
        self.ui.comboBox_fiziksel_moora.setEnabled(True)

        self.ui.lineEdit_uyum_moora.setEnabled(True)
        self.ui.comboBox_uyum_moora.setEnabled(True)

        self.ui.lineEdit_liderlik_moora.setEnabled(True)
        self.ui.comboBox_liderlik_moora.setEnabled(True)

    def stndrt_agirlik_topsis(self):

        if len(self.standartagirliklar) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±",
                                    "√ñnce aƒüƒ±rlƒ±klar hesaplanƒ±p standart olarak belirlenmelidir.")

            self.ui.radioButton_managirlik_topsis.setChecked(True)

        else:
            self.ui.lineEdit_yas_topsis.setEnabled(False)
            self.ui.comboBox_yas_topsis.setEnabled(False)

            self.ui.lineEdit_yetenek_topsis.setEnabled(False)
            self.ui.comboBox_yetenek_topsis.setEnabled(False)

            self.ui.lineEdit_caliskanlik_topsis.setEnabled(False)
            self.ui.comboBox_caliskanlik_topsis.setEnabled(False)

            self.ui.lineEdit_teknik_topsis.setEnabled(False)
            self.ui.comboBox_teknik_topsis.setEnabled(False)

            self.ui.lineEdit_fiziksel_topsis.setEnabled(False)
            self.ui.comboBox_fiziksel_topsis.setEnabled(False)

            self.ui.lineEdit_uyum_topsis.setEnabled(False)
            self.ui.comboBox_uyum_topsis.setEnabled(False)

            self.ui.lineEdit_liderlik_topsis.setEnabled(False)
            self.ui.comboBox_liderlik_topsis.setEnabled(False)

            print(self.standartagirliklar)

            self.ui.lineEdit_yas_topsis.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_topsis.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_topsis.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_topsis.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_topsis.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_topsis.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_topsis.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.comboBox_yas_topsis.setCurrentIndex(1)
            self.ui.comboBox_yetenek_topsis.setCurrentIndex(0)
            self.ui.comboBox_caliskanlik_topsis.setCurrentIndex(0)
            self.ui.comboBox_teknik_topsis.setCurrentIndex(0)
            self.ui.comboBox_fiziksel_topsis.setCurrentIndex(0)
            self.ui.comboBox_uyum_topsis.setCurrentIndex(0)
            self.ui.comboBox_liderlik_topsis.setCurrentIndex(0)

    def stndrt_agirlik_vikor(self):

        if len(self.standartagirliklar) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±",
                                    "√ñnce aƒüƒ±rlƒ±klar hesaplanƒ±p standart olarak belirlenmelidir.")

            self.ui.radioButton_managirlik_vikor.setChecked(True)

        else:
            self.ui.lineEdit_stragirlik_vikor.setEnabled(False)
            self.ui.lineEdit_stragirlik_vikor.setText("0.50")

            self.ui.lineEdit_yas_vikor.setEnabled(False)
            self.ui.comboBox_yas_vikor.setEnabled(False)

            self.ui.lineEdit_yetenek_vikor.setEnabled(False)
            self.ui.comboBox_yetenek_vikor.setEnabled(False)

            self.ui.lineEdit_caliskanlik_vikor.setEnabled(False)
            self.ui.comboBox_caliskanlik_vikor.setEnabled(False)

            self.ui.lineEdit_teknik_vikor.setEnabled(False)
            self.ui.comboBox_teknik_vikor.setEnabled(False)

            self.ui.lineEdit_fiziksel_vikor.setEnabled(False)
            self.ui.comboBox_fiziksel_vikor.setEnabled(False)

            self.ui.lineEdit_uyum_vikor.setEnabled(False)
            self.ui.comboBox_uyum_vikor.setEnabled(False)

            self.ui.lineEdit_liderlik_vikor.setEnabled(False)
            self.ui.comboBox_liderlik_vikor.setEnabled(False)

            self.ui.lineEdit_yas_vikor.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_vikor.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_vikor.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_vikor.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_vikor.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_vikor.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_vikor.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.comboBox_yas_vikor.setCurrentIndex(1)
            self.ui.comboBox_yetenek_vikor.setCurrentIndex(0)
            self.ui.comboBox_caliskanlik_vikor.setCurrentIndex(0)
            self.ui.comboBox_teknik_vikor.setCurrentIndex(0)
            self.ui.comboBox_fiziksel_vikor.setCurrentIndex(0)
            self.ui.comboBox_uyum_vikor.setCurrentIndex(0)
            self.ui.comboBox_liderlik_vikor.setCurrentIndex(0)

    def stndrt_agirlik_copras(self):

        if len(self.standartagirliklar) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±",
                                    "√ñnce aƒüƒ±rlƒ±klar hesaplanƒ±p standart olarak belirlenmelidir.")

            self.ui.radioButton_managirlik_copras.setChecked(True)



        else:
            self.ui.lineEdit_yas_copras.setEnabled(False)
            self.ui.comboBox_yas_copras.setEnabled(False)

            self.ui.lineEdit_yetenek_copras.setEnabled(False)
            self.ui.comboBox_yetenek_copras.setEnabled(False)

            self.ui.lineEdit_caliskanlik_copras.setEnabled(False)
            self.ui.comboBox_caliskanlik_copras.setEnabled(False)

            self.ui.lineEdit_teknik_copras.setEnabled(False)
            self.ui.comboBox_teknik_copras.setEnabled(False)

            self.ui.lineEdit_fiziksel_copras.setEnabled(False)
            self.ui.comboBox_fiziksel_copras.setEnabled(False)

            self.ui.lineEdit_uyum_copras.setEnabled(False)
            self.ui.comboBox_uyum_copras.setEnabled(False)

            self.ui.lineEdit_liderlik_copras.setEnabled(False)
            self.ui.comboBox_liderlik_copras.setEnabled(False)

            self.ui.lineEdit_yas_copras.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_copras.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_copras.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_copras.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_copras.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_copras.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_copras.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.comboBox_yas_copras.setCurrentIndex(1)
            self.ui.comboBox_yetenek_copras.setCurrentIndex(0)
            self.ui.comboBox_caliskanlik_copras.setCurrentIndex(0)
            self.ui.comboBox_teknik_copras.setCurrentIndex(0)
            self.ui.comboBox_fiziksel_copras.setCurrentIndex(0)
            self.ui.comboBox_uyum_copras.setCurrentIndex(0)
            self.ui.comboBox_liderlik_copras.setCurrentIndex(0)

    def stndrt_agirlik_moora(self):

        if len(self.standartagirliklar) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±",
                                    "√ñnce aƒüƒ±rlƒ±klar hesaplanƒ±p standart olarak belirlenmelidir.")

            self.ui.radioButton_managirlik_moora.setChecked(True)

        else:
            self.ui.lineEdit_yas_moora.setEnabled(False)
            self.ui.comboBox_yas_moora.setEnabled(False)

            self.ui.lineEdit_yetenek_moora.setEnabled(False)
            self.ui.comboBox_yetenek_moora.setEnabled(False)

            self.ui.lineEdit_caliskanlik_moora.setEnabled(False)
            self.ui.comboBox_caliskanlik_moora.setEnabled(False)

            self.ui.lineEdit_teknik_moora.setEnabled(False)
            self.ui.comboBox_teknik_moora.setEnabled(False)

            self.ui.lineEdit_fiziksel_moora.setEnabled(False)
            self.ui.comboBox_fiziksel_moora.setEnabled(False)

            self.ui.lineEdit_uyum_moora.setEnabled(False)
            self.ui.comboBox_uyum_moora.setEnabled(False)

            self.ui.lineEdit_liderlik_moora.setEnabled(False)
            self.ui.comboBox_liderlik_moora.setEnabled(False)

            self.ui.lineEdit_yas_moora.setText(str(round(self.standartagirliklar[0], 3)))
            self.ui.lineEdit_yetenek_moora.setText(str(round(self.standartagirliklar[1], 3)))
            self.ui.lineEdit_caliskanlik_moora.setText(str(round(self.standartagirliklar[2], 3)))
            self.ui.lineEdit_teknik_moora.setText(str(round(self.standartagirliklar[3], 3)))
            self.ui.lineEdit_fiziksel_moora.setText(str(round(self.standartagirliklar[4], 3)))
            self.ui.lineEdit_uyum_moora.setText(str(round(self.standartagirliklar[5], 3)))
            self.ui.lineEdit_liderlik_moora.setText(str(round(self.standartagirliklar[6], 3)))

            self.ui.comboBox_yas_moora.setCurrentIndex(1)
            self.ui.comboBox_yetenek_moora.setCurrentIndex(0)
            self.ui.comboBox_caliskanlik_moora.setCurrentIndex(0)
            self.ui.comboBox_teknik_moora.setCurrentIndex(0)
            self.ui.comboBox_fiziksel_moora.setCurrentIndex(0)
            self.ui.comboBox_uyum_moora.setCurrentIndex(0)
            self.ui.comboBox_liderlik_moora.setCurrentIndex(0)

    def futbolcu_ekle(self):

        satirsayimi_topsis = self.ui.tableWidget_topsis.rowCount()
        satirsayimi_vikor = self.ui.tableWidget_vikor.rowCount()
        satirsayimi_copras = self.ui.tableWidget_copras.rowCount()
        satirsayimi_moora = self.ui.tableWidget_moora.rowCount()
        satirsayimi_karsilastirma = self.ui.tableWidget_karsilastirma.rowCount()

        self.ui.tableWidget_topsis.insertRow(satirsayimi_topsis)
        self.ui.tableWidget_vikor.insertRow(satirsayimi_vikor)
        self.ui.tableWidget_copras.insertRow(satirsayimi_copras)
        self.ui.tableWidget_moora.insertRow(satirsayimi_moora)
        self.ui.tableWidget_karsilastirma.insertRow((satirsayimi_karsilastirma))

        self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.insertRow(satirsayimi_topsis)
        self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.insertRow(satirsayimi_vikor)
        self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.insertRow(satirsayimi_copras)
        self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.insertRow(satirsayimi_moora)

        self.futbolcular.append([])
        self.ui.statusBar.showMessage(" Futbolcu sayƒ±sƒ± artƒ±rƒ±ldƒ±.",1500)

    def futbolcu_cikar(self):

        if self.ui.tableWidget_topsis.rowCount() > 2:
            self.ui.tableWidget_topsis.removeRow(self.ui.tableWidget_topsis.rowCount() - 1)
            self.ui.tableWidget_vikor.removeRow(self.ui.tableWidget_vikor.rowCount() - 1)
            self.ui.tableWidget_copras.removeRow(self.ui.tableWidget_copras.rowCount() - 1)
            self.ui.tableWidget_moora.removeRow(self.ui.tableWidget_moora.rowCount() - 1)
            self.ui.tableWidget_karsilastirma.removeRow(self.ui.tableWidget_karsilastirma.rowCount() - 1)

        if self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.rowCount() > 2:
            self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.removeRow(self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.rowCount() - 1)
            self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.removeRow(self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.rowCount() - 1)
            self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.removeRow(self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.rowCount() - 1)
            self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.removeRow(self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.rowCount() - 1)

        if len(self.futbolcular) > 2:
            self.futbolcular.pop()
            self.ui.statusBar.showMessage(" Futbolcu sayƒ±sƒ± azaltƒ±ldƒ±.",1500)
        else:
            QMessageBox.information(self, "Bilgi Mesajƒ±", "Futbolcu sayƒ±sƒ± en az 2 olmalƒ±dƒ±r.")

    def verileri_kopyala(self):

        if self.ui.tabWidget_sekmeler.currentIndex() == 1:

            satirlistesi = [i for i in (range(self.ui.tableWidget_topsis.rowCount()))]

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                for c in range(1, self.ui.tableWidget_topsis.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_topsis.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                futbolcu_isimleri.append(self.ui.tableWidget_topsis.item(r, 0).text())

            print(self.futbolcular)

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                self.ui.tableWidget_vikor.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_vikor.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_vikor.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_vikor.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_vikor.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_vikor.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_vikor.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_vikor.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_copras.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_copras.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_copras.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_copras.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_copras.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_copras.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_copras.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_copras.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_moora.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_moora.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_moora.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_moora.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_moora.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_moora.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_moora.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_moora.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

        elif self.ui.tabWidget_sekmeler.currentIndex() == 2:

            satirlistesi = [i for i in (range(self.ui.tableWidget_vikor.rowCount()))]

            for r in range(self.ui.tableWidget_vikor.rowCount()):
                for c in range(1, self.ui.tableWidget_vikor.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_vikor.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_vikor.rowCount()):
                futbolcu_isimleri.append(self.ui.tableWidget_vikor.item(r, 0).text())

            print(self.futbolcular)

            for r in range(self.ui.tableWidget_vikor.rowCount()):
                self.ui.tableWidget_topsis.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_topsis.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_topsis.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_topsis.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_topsis.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_topsis.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_topsis.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_topsis.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_copras.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_copras.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_copras.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_copras.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_copras.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_copras.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_copras.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_copras.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_moora.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_moora.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_moora.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_moora.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_moora.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_moora.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_moora.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_moora.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

        elif self.ui.tabWidget_sekmeler.currentIndex() == 3:

            satirlistesi = [i for i in (range(self.ui.tableWidget_copras.rowCount()))]

            for r in range(self.ui.tableWidget_copras.rowCount()):
                for c in range(1, self.ui.tableWidget_copras.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_copras.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_copras.rowCount()):
                futbolcu_isimleri.append(self.ui.tableWidget_copras.item(r, 0).text())

            print(self.futbolcular)

            for r in range(self.ui.tableWidget_copras.rowCount()):
                self.ui.tableWidget_topsis.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_topsis.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_topsis.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_topsis.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_topsis.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_topsis.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_topsis.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_topsis.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_vikor.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_vikor.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_vikor.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_vikor.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_vikor.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_vikor.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_vikor.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_vikor.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_moora.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_moora.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_moora.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_moora.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_moora.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_moora.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_moora.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_moora.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

        elif self.ui.tabWidget_sekmeler.currentIndex() == 4:

            satirlistesi = [i for i in (range(self.ui.tableWidget_moora.rowCount()))]

            for r in range(self.ui.tableWidget_moora.rowCount()):
                for c in range(1, self.ui.tableWidget_moora.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_moora.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_moora.rowCount()):
                futbolcu_isimleri.append(self.ui.tableWidget_moora.item(r, 0).text())

            print(self.futbolcular)

            for r in range(self.ui.tableWidget_moora.rowCount()):
                self.ui.tableWidget_topsis.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_topsis.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_topsis.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_topsis.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_topsis.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_topsis.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_topsis.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_topsis.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_vikor.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_vikor.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_vikor.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_vikor.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_vikor.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_vikor.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_vikor.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_vikor.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

                self.ui.tableWidget_copras.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.ui.tableWidget_copras.setItem(r, 1, QTableWidgetItem(str(self.futbolcular[r][0])))
                self.ui.tableWidget_copras.setItem(r, 2, QTableWidgetItem(str(self.futbolcular[r][1])))
                self.ui.tableWidget_copras.setItem(r, 3, QTableWidgetItem(str(self.futbolcular[r][2])))
                self.ui.tableWidget_copras.setItem(r, 4, QTableWidgetItem(str(self.futbolcular[r][3])))
                self.ui.tableWidget_copras.setItem(r, 5, QTableWidgetItem(str(self.futbolcular[r][4])))
                self.ui.tableWidget_copras.setItem(r, 6, QTableWidgetItem(str(self.futbolcular[r][5])))
                self.ui.tableWidget_copras.setItem(r, 7, QTableWidgetItem(str(self.futbolcular[r][6])))

        for i in range(len(self.futbolcular)):
            for j in range(len(self.futbolcular[i])):
                del self.futbolcular[i][-1]

    def hesapla_topsis(self):

        if (len(self.standartagirliklar)) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±", "√ñnce aƒüƒ±rlƒ±klarƒ± standart olarak belirlemelisiniz.")

        else:
            if self.ui.radioButton_stdagirlik_topsis.isChecked():
                weights = self.standartagirliklar
                criterion_type = ["Min", "Max", "Max", "Max", "Max", "Max", "Max"]

            elif self.ui.radioButton_managirlik_topsis.isChecked():
                agirliklar = []
                criterion_type = []

                agrlk_yas = self.ui.lineEdit_yas_topsis.text()
                agrlk_yas = float(agrlk_yas)
                agirliklar.append(agrlk_yas)
                agrlk_yetenek = self.ui.lineEdit_yetenek_topsis.text()
                agrlk_yetenek = float(agrlk_yetenek)
                agirliklar.append(agrlk_yetenek)
                agrlk_caliskanlik = self.ui.lineEdit_caliskanlik_topsis.text()
                agrlk_caliskanlik = float(agrlk_caliskanlik)
                agirliklar.append(agrlk_caliskanlik)
                agrlk_teknik = self.ui.lineEdit_teknik_topsis.text()
                agrlk_teknik = float(agrlk_teknik)
                agirliklar.append(agrlk_teknik)
                agrlk_fiziksel = self.ui.lineEdit_fiziksel_topsis.text()
                agrlk_fiziksel = float(agrlk_fiziksel)
                agirliklar.append(agrlk_fiziksel)
                agrlk_uyum = self.ui.lineEdit_uyum_topsis.text()
                agrlk_uyum = float(agrlk_uyum)
                agirliklar.append(agrlk_uyum)
                agrlk_liderlik = self.ui.lineEdit_liderlik_topsis.text()
                agrlk_liderlik = float(agrlk_liderlik)
                agirliklar.append(agrlk_liderlik)

                weights = np.array(agirliklar)

                kriter_yas = self.ui.comboBox_yas_topsis.currentText()
                criterion_type.append(kriter_yas)
                kriter_yetenek = self.ui.comboBox_yetenek_topsis.currentText()
                criterion_type.append(kriter_yetenek)
                kriter_caliskanlik = self.ui.comboBox_caliskanlik_topsis.currentText()
                criterion_type.append(kriter_caliskanlik)
                kriter_teknik = self.ui.comboBox_teknik_topsis.currentText()
                criterion_type.append(kriter_teknik)
                kriter_fiziksel = self.ui.comboBox_fiziksel_topsis.currentText()
                criterion_type.append(kriter_fiziksel)
                kriter_uyum = self.ui.comboBox_uyum_topsis.currentText()
                criterion_type.append(kriter_uyum)
                kriter_liderlik = self.ui.comboBox_liderlik_topsis.currentText()
                criterion_type.append(kriter_liderlik)

            satirlistesi = [i for i in (range(self.ui.tableWidget_topsis.rowCount()))]

            print(weights)
            print("")
            print(criterion_type)
            print("")

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                for c in range(1,self.ui.tableWidget_topsis.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_topsis.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            dataset = np.array(self.futbolcular)

            for i in range(len(self.futbolcular)):
                for j in range(len(self.futbolcular[i])):
                    del self.futbolcular[i][-1]

            topsis_uygulama = topsis_method(dataset, weights, criterion_type, graph=False)

            print("")
            print("topsis sonu√ßlarƒ±")
            print(topsis_uygulama)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                    futbolcu_isimleri.append(self.ui.tableWidget_topsis.item(r, 0).text())

            print("")
            print("futbolcular")
            print(futbolcu_isimleri)

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.setItem(r, 1, QTableWidgetItem(str(topsis_uygulama[r])))
                self.ui.tableWidget_karsilastirma.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))

            self.topsis_sonuc.show()

    def hesapla_vikor(self):

        if (len(self.standartagirliklar)) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±", "√ñnce aƒüƒ±rlƒ±klarƒ± standart olarak belirlemelisiniz.")

        else:
            if self.ui.radioButton_stdagirlik_vikor.isChecked():
                weights = self.standartagirliklar
                criterion_type = ["Min", "Max", "Max", "Max", "Max", "Max", "Max"]

            elif self.ui.radioButton_managirlik_vikor.isChecked():
                agirliklar = []
                criterion_type = []

                agrlk_yas = self.ui.lineEdit_yas_vikor.text()
                agrlk_yas = float(agrlk_yas)
                agirliklar.append(agrlk_yas)
                agrlk_yetenek = self.ui.lineEdit_yetenek_vikor.text()
                agrlk_yetenek = float(agrlk_yetenek)
                agirliklar.append(agrlk_yetenek)
                agrlk_caliskanlik = self.ui.lineEdit_caliskanlik_vikor.text()
                agrlk_caliskanlik = float(agrlk_caliskanlik)
                agirliklar.append(agrlk_caliskanlik)
                agrlk_teknik = self.ui.lineEdit_teknik_vikor.text()
                agrlk_teknik = float(agrlk_teknik)
                agirliklar.append(agrlk_teknik)
                agrlk_fiziksel = self.ui.lineEdit_fiziksel_vikor.text()
                agrlk_fiziksel = float(agrlk_fiziksel)
                agirliklar.append(agrlk_fiziksel)
                agrlk_uyum = self.ui.lineEdit_uyum_vikor.text()
                agrlk_uyum = float(agrlk_uyum)
                agirliklar.append(agrlk_uyum)
                agrlk_liderlik = self.ui.lineEdit_liderlik_vikor.text()
                agrlk_liderlik = float(agrlk_liderlik)
                agirliklar.append(agrlk_liderlik)

                weights = np.array(agirliklar)

                kriter_yas = self.ui.comboBox_yas_vikor.currentText()
                criterion_type.append(kriter_yas)
                kriter_yetenek = self.ui.comboBox_yetenek_vikor.currentText()
                criterion_type.append(kriter_yetenek)
                kriter_caliskanlik = self.ui.comboBox_caliskanlik_vikor.currentText()
                criterion_type.append(kriter_caliskanlik)
                kriter_teknik = self.ui.comboBox_teknik_vikor.currentText()
                criterion_type.append(kriter_teknik)
                kriter_fiziksel = self.ui.comboBox_fiziksel_vikor.currentText()
                criterion_type.append(kriter_fiziksel)
                kriter_uyum = self.ui.comboBox_uyum_vikor.currentText()
                criterion_type.append(kriter_uyum)
                kriter_liderlik = self.ui.comboBox_liderlik_vikor.currentText()
                criterion_type.append(kriter_liderlik)

            satirlistesi = [i for i in (range(self.ui.tableWidget_vikor.rowCount()))]

            print(weights)
            print("")
            print(criterion_type)
            print("")

            for r in range(self.ui.tableWidget_vikor.rowCount()):
                for c in range(1, self.ui.tableWidget_vikor.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_vikor.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            dataset = np.array(self.futbolcular)

            for i in range(len(self.futbolcular)):
                for j in range(len(self.futbolcular[i])):
                    del self.futbolcular[i][-1]

            s, r, q, c_solution = vikor_method(dataset, weights, criterion_type, strategy_coefficient = 0.5, graph = False)

            print(s)
            print("")
            print(r)
            print("")
            print(q)
            print("")
            print(c_solution)

            futbolcu_isimleri = []

            for row in range(self.ui.tableWidget_vikor.rowCount()):
                futbolcu_isimleri.append(self.ui.tableWidget_vikor.item(row, 0).text())

            for row in range(self.ui.tableWidget_vikor.rowCount()):
                self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.setItem(row, 0, QTableWidgetItem(str(futbolcu_isimleri[row])))
                self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.setItem(row, 1, QTableWidgetItem(str(s[row][0])))
                self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.setItem(row, 2, QTableWidgetItem(str(r[row][0])))
                self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.setItem(row, 3, QTableWidgetItem(str(q[row])))

            self.vikor_sonuc.show()

    def hesapla_copras(self):

        if (len(self.standartagirliklar)) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±", "√ñnce aƒüƒ±rlƒ±klarƒ± standart olarak belirlemelisiniz.")

        else:
            if self.ui.radioButton_stdagirlik_copras.isChecked():
                weights = self.standartagirliklar
                criterion_type = ["Min", "Max", "Max", "Max", "Max", "Max", "Max"]

            elif self.ui.radioButton_managirlik_copras.isChecked():
                agirliklar = []
                criterion_type = []

                agrlk_yas = self.ui.lineEdit_yas_copras.text()
                agrlk_yas = float(agrlk_yas)
                agirliklar.append(agrlk_yas)
                agrlk_yetenek = self.ui.lineEdit_yetenek_copras.text()
                agrlk_yetenek = float(agrlk_yetenek)
                agirliklar.append(agrlk_yetenek)
                agrlk_caliskanlik = self.ui.lineEdit_caliskanlik_copras.text()
                agrlk_caliskanlik = float(agrlk_caliskanlik)
                agirliklar.append(agrlk_caliskanlik)
                agrlk_teknik = self.ui.lineEdit_teknik_copras.text()
                agrlk_teknik = float(agrlk_teknik)
                agirliklar.append(agrlk_teknik)
                agrlk_fiziksel = self.ui.lineEdit_fiziksel_copras.text()
                agrlk_fiziksel = float(agrlk_fiziksel)
                agirliklar.append(agrlk_fiziksel)
                agrlk_uyum = self.ui.lineEdit_uyum_copras.text()
                agrlk_uyum = float(agrlk_uyum)
                agirliklar.append(agrlk_uyum)
                agrlk_liderlik = self.ui.lineEdit_liderlik_copras.text()
                agrlk_liderlik = float(agrlk_liderlik)
                agirliklar.append(agrlk_liderlik)

                weights = np.array(agirliklar)

                kriter_yas = self.ui.comboBox_yas_copras.currentText()
                criterion_type.append(kriter_yas)
                kriter_yetenek = self.ui.comboBox_yetenek_copras.currentText()
                criterion_type.append(kriter_yetenek)
                kriter_caliskanlik = self.ui.comboBox_caliskanlik_copras.currentText()
                criterion_type.append(kriter_caliskanlik)
                kriter_teknik = self.ui.comboBox_teknik_copras.currentText()
                criterion_type.append(kriter_teknik)
                kriter_fiziksel = self.ui.comboBox_fiziksel_copras.currentText()
                criterion_type.append(kriter_fiziksel)
                kriter_uyum = self.ui.comboBox_uyum_copras.currentText()
                criterion_type.append(kriter_uyum)
                kriter_liderlik = self.ui.comboBox_liderlik_copras.currentText()
                criterion_type.append(kriter_liderlik)

            satirlistesi = [i for i in (range(self.ui.tableWidget_copras.rowCount()))]

            for r in range(self.ui.tableWidget_copras.rowCount()):
                for c in range(1,self.ui.tableWidget_copras.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_copras.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            dataset = np.array(self.futbolcular)

            for i in range(len(self.futbolcular)):
                for j in range(len(self.futbolcular[i])):
                    del self.futbolcular[i][-1]

            gorelionemler ,faydaoranlari = copras_method(dataset, weights, criterion_type, graph = False)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_copras.rowCount()):
                    futbolcu_isimleri.append(self.ui.tableWidget_copras.item(r, 0).text())

            for r in range(self.ui.tableWidget_copras.rowCount()):
                self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.setItem(r, 1, QTableWidgetItem(str(gorelionemler[r])))
                self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.setItem(r, 2, QTableWidgetItem(str(faydaoranlari[r])))

            self.copras_sonuc.show()

    def hesapla_moora(self):

        if (len(self.standartagirliklar)) == 0:
            QMessageBox.information(self, "Bilgi Mesajƒ±", "√ñnce aƒüƒ±rlƒ±klarƒ± standart olarak belirlemelisiniz.")

        else:
            if self.ui.radioButton_stdagirlik_moora.isChecked():
                weights = self.standartagirliklar
                criterion_type = ["Min", "Max", "Max", "Max", "Max", "Max", "Max"]

            elif self.ui.radioButton_managirlik_moora.isChecked():
                agirliklar = []
                criterion_type = []

                agrlk_yas = self.ui.lineEdit_yas_moora.text()
                agrlk_yas = float(agrlk_yas)
                agirliklar.append(agrlk_yas)
                agrlk_yetenek = self.ui.lineEdit_yetenek_moora.text()
                agrlk_yetenek = float(agrlk_yetenek)
                agirliklar.append(agrlk_yetenek)
                agrlk_caliskanlik = self.ui.lineEdit_caliskanlik_moora.text()
                agrlk_caliskanlik = float(agrlk_caliskanlik)
                agirliklar.append(agrlk_caliskanlik)
                agrlk_teknik = self.ui.lineEdit_teknik_moora.text()
                agrlk_teknik = float(agrlk_teknik)
                agirliklar.append(agrlk_teknik)
                agrlk_fiziksel = self.ui.lineEdit_fiziksel_moora.text()
                agrlk_fiziksel = float(agrlk_fiziksel)
                agirliklar.append(agrlk_fiziksel)
                agrlk_uyum = self.ui.lineEdit_uyum_moora.text()
                agrlk_uyum = float(agrlk_uyum)
                agirliklar.append(agrlk_uyum)
                agrlk_liderlik = self.ui.lineEdit_liderlik_moora.text()
                agrlk_liderlik = float(agrlk_liderlik)
                agirliklar.append(agrlk_liderlik)

                weights = np.array(agirliklar)

                kriter_yas = self.ui.comboBox_yas_moora.currentText()
                criterion_type.append(kriter_yas)
                kriter_yetenek = self.ui.comboBox_yetenek_moora.currentText()
                criterion_type.append(kriter_yetenek)
                kriter_caliskanlik = self.ui.comboBox_caliskanlik_moora.currentText()
                criterion_type.append(kriter_caliskanlik)
                kriter_teknik = self.ui.comboBox_teknik_moora.currentText()
                criterion_type.append(kriter_teknik)
                kriter_fiziksel = self.ui.comboBox_fiziksel_moora.currentText()
                criterion_type.append(kriter_fiziksel)
                kriter_uyum = self.ui.comboBox_uyum_moora.currentText()
                criterion_type.append(kriter_uyum)
                kriter_liderlik = self.ui.comboBox_liderlik_moora.currentText()
                criterion_type.append(kriter_liderlik)

            satirlistesi = [i for i in (range(self.ui.tableWidget_moora.rowCount()))]

            for r in range(self.ui.tableWidget_moora.rowCount()):
                for c in range(1, self.ui.tableWidget_moora.columnCount()):

                    for k in satirlistesi:
                        if r == k:
                            a = self.ui.tableWidget_moora.item(r, c)
                            veri = int(a.text())
                            self.futbolcular[r].append(veri)

            dataset = np.array(self.futbolcular)

            for i in range(len(self.futbolcular)):
                for j in range(len(self.futbolcular[i])):
                    del self.futbolcular[i][-1]

            rank, y_i = moora_method(dataset, weights, criterion_type, graph = False)

            futbolcu_isimleri = []

            for r in range(self.ui.tableWidget_moora.rowCount()):
                futbolcu_isimleri.append(self.ui.tableWidget_moora.item(r, 0).text())

            for r in range(self.ui.tableWidget_moora.rowCount()):
                self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.setItem(r, 0, QTableWidgetItem(str(futbolcu_isimleri[r])))
                self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.setItem(r, 1, QTableWidgetItem(str(y_i[r])))

            self.moora_sonuc.show()

    def karsilastir_borda(self):

        try:

            futbolcu_siralamasi_topsis = []
            futbolcu_siralamasi_vikor = []
            futbolcu_siralamasi_copras = []
            futbolcu_siralamasi_moora = []

            self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.sortItems(1, Qt.DescendingOrder)
            self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.sortItems(3, Qt.AscendingOrder)
            self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.sortItems(2, Qt.DescendingOrder)
            self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.sortItems(1, Qt.DescendingOrder)

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                futbolcu_siralamasi_topsis.append(self.topsis_sonuc.ui_snc_topsis.tableWidget_sonuc_topsis.item(r, 0).text())

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                futbolcu_siralamasi_vikor.append(self.vikor_sonuc.ui_snc_vikor.tableWidget_sonuc_vikor.item(r, 0).text())

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                futbolcu_siralamasi_copras.append(self.copras_sonuc.ui_snc_copras.tableWidget_sonuc_copras.item(r, 0).text())

            for r in range(self.ui.tableWidget_topsis.rowCount()):
                futbolcu_siralamasi_moora.append(self.moora_sonuc.ui_snc_moora.tableWidget_sonuc_moora.item(r, 0).text())

            #topsis
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                for i in range(len(futbolcu_siralamasi_topsis)):
                    if self.ui.tableWidget_karsilastirma.item(r, 0).text() == futbolcu_siralamasi_topsis[i]:
                        self.ui.tableWidget_karsilastirma.setItem(r, 1, QTableWidgetItem(
                            str(futbolcu_siralamasi_topsis.index(self.ui.tableWidget_karsilastirma.item(r, 0).text()) + 1)))
                        self.ui.tableWidget_karsilastirma.item(r, 1).setTextAlignment(Qt.AlignCenter)

            #vikor
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                for i in range(len(futbolcu_siralamasi_vikor)):
                    if self.ui.tableWidget_karsilastirma.item(r, 0).text() == futbolcu_siralamasi_vikor[i]:
                        self.ui.tableWidget_karsilastirma.setItem(r, 3, QTableWidgetItem(
                            str(futbolcu_siralamasi_vikor.index(self.ui.tableWidget_karsilastirma.item(r, 0).text()) + 1)))
                        self.ui.tableWidget_karsilastirma.item(r, 3).setTextAlignment(Qt.AlignCenter)

            #copras
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                for i in range(len(futbolcu_siralamasi_copras)):
                    if self.ui.tableWidget_karsilastirma.item(r, 0).text() == futbolcu_siralamasi_copras[i]:
                        self.ui.tableWidget_karsilastirma.setItem(r, 5, QTableWidgetItem(
                            str(futbolcu_siralamasi_copras.index(self.ui.tableWidget_karsilastirma.item(r, 0).text()) + 1)))
                        self.ui.tableWidget_karsilastirma.item(r, 5).setTextAlignment(Qt.AlignCenter)

            #moora
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                for i in range(len(futbolcu_siralamasi_moora)):
                    if self.ui.tableWidget_karsilastirma.item(r, 0).text() == futbolcu_siralamasi_moora[i]:
                        self.ui.tableWidget_karsilastirma.setItem(r, 7, QTableWidgetItem(
                            str(futbolcu_siralamasi_moora.index(self.ui.tableWidget_karsilastirma.item(r, 0).text()) + 1)))
                        self.ui.tableWidget_karsilastirma.item(r, 7).setTextAlignment(Qt.AlignCenter)

        except (AttributeError):
            QMessageBox.information(self, "Bilgi Mesajƒ±", "Y√∂ntemlerden biri ile hesaplama yapmadƒ±nƒ±z.")

    def hesapla_borda(self):

        if self.ui.tableWidget_karsilastirma.item(0,1).text() == (" "):
            QMessageBox.information(self, "Bilgi Mesajƒ±", "√ñnce kar≈üƒ±la≈ütƒ±rmayƒ± yapmalƒ±sƒ±nƒ±z.")

        else:
            puan = (len(self.futbolcular) - 1)
            self.ui.tableWidget_karsilastirma.sortItems(1, Qt.AscendingOrder)
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                self.ui.tableWidget_karsilastirma.setItem(r, 2, QTableWidgetItem(str(puan)))
                self.ui.tableWidget_karsilastirma.item(r, 2).setTextAlignment(Qt.AlignCenter)
                puan -= 1

            puan = (len(self.futbolcular) - 1)
            self.ui.tableWidget_karsilastirma.sortItems(3, Qt.AscendingOrder)
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                self.ui.tableWidget_karsilastirma.setItem(r, 4, QTableWidgetItem(str(puan)))
                self.ui.tableWidget_karsilastirma.item(r, 4).setTextAlignment(Qt.AlignCenter)
                puan -= 1

            puan = (len(self.futbolcular) - 1)
            self.ui.tableWidget_karsilastirma.sortItems(5, Qt.AscendingOrder)
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                self.ui.tableWidget_karsilastirma.setItem(r, 6, QTableWidgetItem(str(puan)))
                self.ui.tableWidget_karsilastirma.item(r, 6).setTextAlignment(Qt.AlignCenter)
                puan -= 1

            puan = (len(self.futbolcular) - 1)
            self.ui.tableWidget_karsilastirma.sortItems(7, Qt.AscendingOrder)
            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                self.ui.tableWidget_karsilastirma.setItem(r, 8, QTableWidgetItem(str(puan)))
                self.ui.tableWidget_karsilastirma.item(r, 8).setTextAlignment(Qt.AlignCenter)
                puan -= 1

            bordapuanlari = []

            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                a = (
                    int(self.ui.tableWidget_karsilastirma.item(r, 2).text()) + int(
                        self.ui.tableWidget_karsilastirma.item(r, 4).text()) + int(
                        self.ui.tableWidget_karsilastirma.item(r, 6).text()) + int(
                        self.ui.tableWidget_karsilastirma.item(r, 8).text())
                    )
                bordapuanlari.append(a)
                bordapuanlari.sort(reverse=True)

            for r in range(self.ui.tableWidget_karsilastirma.rowCount()):
                self.ui.tableWidget_karsilastirma.setItem(r, 9, QTableWidgetItem(str(bordapuanlari[r])))
                self.ui.tableWidget_karsilastirma.setItem(r, 10, QTableWidgetItem(str(r + 1)))
                self.ui.tableWidget_karsilastirma.item(r, 9).setTextAlignment(Qt.AlignCenter)
                self.ui.tableWidget_karsilastirma.item(r, 10).setTextAlignment(Qt.AlignCenter)

            self.ui.tableWidget_karsilastirma.sortItems(0, Qt.AscendingOrder)

class SonucPencere_Topsis(QMainWindow,QTableWidget,QTableWidgetItem):

    def __init__(self):
        super().__init__()

        self.ui_snc_topsis = Ui_Topsis_sonuc_penceresi()
        self.ui_snc_topsis.setupUi(self)

class SonucPencere_Vikor(QMainWindow,QTableWidget,QTableWidgetItem):

    def __init__(self):
        super().__init__()

        self.ui_snc_vikor = Ui_Vikor_Sonuc_Penceresi()
        self.ui_snc_vikor.setupUi(self)

class SonucPencere_Copras(QMainWindow,QTableWidget,QTableWidgetItem):

    def __init__(self):
        super().__init__()

        self.ui_snc_copras = Ui_Copras_sonuc_penceresi()
        self.ui_snc_copras.setupUi(self)

class SonucPencere_Moora(QMainWindow,QTableWidget,QTableWidgetItem):

    def __init__(self):
        super().__init__()

        self.ui_snc_moora = Ui_Moora_sonuc_penceresi()
        self.ui_snc_moora.setupUi(self)

uygulama = QApplication(sys.argv)
fkd = AnaPencere()
fkd.show()
sys.exit(uygulama.exec())